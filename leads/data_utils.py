
from django.utils import timezone
import datetime
from datetime import timedelta

from .models import Lead, Line

from .utils import traffic_sources

def leads_in_time_period(days_into_past):

    leads = Lead.objects.filter(current_status__in=['Inquired', 'Contacted', 'Sold'], date_created__range=(timezone.now() - timedelta(days=days_into_past), timezone.now()))
    return leads


def traffic_source_analysis(days_into_past):
    """
    Takes in a number of days into the past, and returns the number of leads generated for each source
    from this many days in the past to the current day.
    """
    leads = leads_in_time_period(days_into_past)

    # outreach_platforms = traffic_sources()

    data = {}

    for l in leads:
        if l.source not in data.keys():
            data[l.source] = 1
        else:
            data[l.source] += 1

    return data


def revenue_generated(days_into_past):
    """
    Estimates the revenue generated by outreach in the given period of time by using
    an estimate of $100 per sale made.
    """
    leads = Lead.objects.filter(current_status='Sold', date_sold__range=(timezone.now() - timedelta(days=days_into_past), timezone.now()))

    return round(len(leads) * 100, 3) # Each sale is estimated to be worth ~$100


def proportion_of_sales_to_leads(days_into_past):

    # Number of leads generated in this time period.
    leads = leads_in_time_period(days_into_past)

    # Count leads marked as sold.
    n_sold = 0
    for l in leads:
        if l.current_status == 'Sold':
            n_sold += 1

    proportion = n_sold / len(leads)

    return round(proportion * 100 , 2)# Used in the UI as a percentage.


def lead_time_series(days_into_past):

    # NOTE: May want to retrieve leads where date_created and/or date_sold is not None.
    leads_created_this_per = Lead.objects.filter(current_status__in=['Inquired', 'Contacted', 'Sold'], date_created__range=(timezone.now() - timedelta(days=days_into_past), timezone.now()))

    # Get a list of dates in the desired range of time, to use as keys in the status dictionaries below.
    time_series_of_days = []
    for i in range(days_into_past + 1):
        time_series_of_days.insert(0, (timezone.now() - timedelta(days=i)).date()) # Insert at front of array. Dates decrease as i increases.

    # data = {
    #     'Inquired':{},
    #     'Contacted':{},
    #     'Sold':{},
    #     'Unsellable':{}
    # }

    data = {
        'sold':{},
        'created':{}
    }

    # Set the dictionary up.
    for day in time_series_of_days:
        data['sold'][day] = 0
        data['created'][day] = 0

    # Count the number of leads both sold and created during the time period.
    for l in leads_created_this_per:

        # If sold increment sold aggregator for this day.
        if l.current_status == 'Sold':
            data['sold'][l.date_sold] += 1

        # Whether sold or not, increment the creation of a lead on this lead's day created.
        data['created'][l.date_created.date()] += 1

    return data


def retrieve_lead_data(days_into_past):

    traffic_source_data = traffic_source_analysis(15)
    rev_generated = revenue_generated(15)
    proportion_sold = proportion_of_sales_to_leads(15)
    leads_time_series = lead_time_series(15)

    return traffic_source_data, rev_generated, proportion_sold, leads_time_series


